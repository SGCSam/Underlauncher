<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Underlauncher"
                    x:Class="Underlauncher.Styles.Button">

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Window.Static.Background}"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Window.Static.Foreground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Window.MouseOver.Background}"/>
                            <Setter Property="Foreground" Value="{StaticResource Button.Window.MouseOver.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Window.Pressed.Background}"/>
                            <Setter Property="Foreground" Value="{StaticResource Button.Window.Pressed.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity"  Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowButtonStyleMaxRestore" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="CanMinimize">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="NoResize">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WindowButtonStyleMinimize" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="NoResize">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Static.Foreground}"/>
        <Setter Property="FontFamily" Value="{StaticResource FontFamily.buttonFont.Regular}"/>
        <Setter Property="FontSize" Value="32"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0,6,5,0"/>
        <Setter Property="TextBlock.LineHeight" Value="30"/>
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="Width" Value="112"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" MouseEnter="Button_MouseEnter" MouseDown="Button_MouseDown">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="iconColumn">
                                    <ColumnDefinition.Style>
                                        <Style TargetType="{x:Type ColumnDefinition}">
                                            <Setter Property="Width" Value="25"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=Points, ElementName=icon}" Value="{x:Null}">
                                                    <Setter Property="Width" Value="0"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ColumnDefinition.Style>
                                </ColumnDefinition>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Polygon x:Name="icon" Points="{Binding Path=(local:Button.Points), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Width="20" Height="20" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{StaticResource Button.Static.Foreground}"/>
                            <Viewbox Grid.Column="1" Height="27" Margin="5,0,0,0" Stretch="Fill">
                                <ContentPresenter x:Name="contentPresenter" TextOptions.TextRenderingMode="ClearType" SnapsToDevicePixels="True" UseLayoutRounding="True" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ContentPresenter.Style>
                                        <Style TargetType="{x:Type ContentPresenter}">
                                            <Setter Property="Margin" Value="0,6,5,0"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=Points, ElementName=icon}" Value="{x:Null}">
                                                    <Setter Property="Margin" Value="0,6,0,0"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ContentPresenter.Style>
                                </ContentPresenter>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="icon" Value="{StaticResource Button.MouseOver.Foreground}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.MouseOver.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="icon" Value="{StaticResource Button.Pressed.Foreground}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Pressed.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="icon" Value="{StaticResource Button.Disabled.Foreground}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>